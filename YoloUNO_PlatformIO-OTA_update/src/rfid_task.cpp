#include <Arduino.h>
#include "rfid_task.h"
#include "tasks.h"
#include "mqtt_task.h"
#include "google_sheets_task.h"

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng MFRC522
MFRC522 mfrc522(RFID_SS_PIN, RFID_RST_PIN);

void setupRFID() {
  Serial.println(F("Kh·ªüi t·∫°o RFID Reader..."));
  
  // C·∫•u h√¨nh c√°c pin
  pinMode(RFID_SS_PIN, OUTPUT);
  pinMode(RFID_RST_PIN, OUTPUT);
  digitalWrite(RFID_SS_PIN, HIGH);
  digitalWrite(RFID_RST_PIN, HIGH);
  delay(10);
  
  // Kh·ªüi t·∫°o SPI bus v·ªõi pin c·ª• th·ªÉ cho YoloUNO
  SPI.begin(RFID_SCK_PIN, RFID_MISO_PIN, RFID_MOSI_PIN, RFID_SS_PIN);
  SPI.setFrequency(1000000); // 1MHz
  
  // Reset MFRC522
  digitalWrite(RFID_RST_PIN, LOW);
  delay(50);
  digitalWrite(RFID_RST_PIN, HIGH);
  delay(100);
  
  // Kh·ªüi t·∫°o MFRC522
  mfrc522.PCD_Init();
  delay(100);
  
  // Ki·ªÉm tra k·∫øt n·ªëi v·ªõi nhi·ªÅu l·∫ßn th·ª≠ v√† auto-retry
  Serial.println(F("Ki·ªÉm tra k·∫øt n·ªëi MFRC522..."));
  bool connected = false;
  const int MAX_INIT_RETRY = 10;
  
  for (int i = 0; i < MAX_INIT_RETRY; i++) {
    if (testRFIDConnection()) {
      connected = true;
      break;
    }
    
    Serial.printf("Init attempt %d/%d failed, retrying...\n", i+1, MAX_INIT_RETRY);
    
    // Reset v√† th·ª≠ l·∫°i
    handleRFIDError();
    delay(500);
  }
  
  if (!connected) {
    Serial.println(F(" KH√îNG th·ªÉ k·∫øt n·ªëi v·ªõi MFRC522 sau nhi·ªÅu l·∫ßn th·ª≠!"));
    Serial.println(F("H·ªá th·ªëng s·∫Ω ti·∫øp t·ª•c ch·∫°y v√† th·ª≠ k·∫øt n·ªëi l·∫°i ƒë·ªãnh k·ª≥"));
  } else {
    // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ph·∫ßn m·ªÅm
    Serial.println(F("‚úÖ RFID Reader ƒë√£ s·∫µn s√†ng!"));
    Serial.println(F("üì± ƒê∆∞a th·∫ª g·∫ßn reader ƒë·ªÉ ƒë·ªçc..."));
    Serial.println(F("üîÑ Auto-reconnect enabled"));
    mfrc522.PCD_DumpVersionToSerial();
  }
  
  Serial.println(F(" S∆° ƒë·ªì k·∫øt n·ªëi YoloUNO:"));
  Serial.println(F("   VCC  -> 3.3V"));
  Serial.println(F("   GND  -> GND"));
  Serial.println(F("   SS   -> D10 (GPIO 21)"));
  Serial.println(F("   SCK  -> D13 (GPIO 48)"));
  Serial.println(F("   MOSI -> D11 (GPIO 38)"));
  Serial.println(F("   MISO -> D12 (GPIO 47)"));
  Serial.println(F("   RST  -> D9  (GPIO 18)"));
  Serial.println();
}

// H√†m ki·ªÉm tra k·∫øt n·ªëi MFRC522 v·ªõi detailed reporting
bool testRFIDConnection() {
  // Th·ª≠ ƒë·ªçc version register
  byte version = mfrc522.PCD_ReadRegister(mfrc522.VersionReg);
  
  if (version == 0x00 || version == 0xFF) {
    Serial.printf("   ‚ùå Invalid version: 0x%02X\n", version);
    return false;
  } else {
    Serial.printf("   ‚úÖ Valid version: 0x%02X\n", version);
    return true;
  }
}

// H√†m in m√£ th·∫ª d·∫°ng HEX
void printCardID() {
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) {
      Serial.print(F("0"));
    }
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    if (i < mfrc522.uid.size - 1) {
      Serial.print(F(" "));
    }
  }
}

// H√†m hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa th·∫ª
void printCardDetails() {
  // Hi·ªÉn th·ªã lo·∫°i th·∫ª
  MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
  Serial.print(F("Lo·∫°i th·∫ª: "));
  Serial.println(mfrc522.PICC_GetTypeName(piccType));
  
  // Hi·ªÉn th·ªã UID d·∫°ng decimal
  Serial.print(F("M√£ th·∫ª (Dec): "));
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i]);
    if (i < mfrc522.uid.size - 1) {
      Serial.print(F(" "));
    }
  }
  Serial.println();
  
  // Hi·ªÉn th·ªã UID d·∫°ng chu·ªói li√™n t·ª•c
  Serial.print(F("M√£ th·∫ª (String): "));
  String cardID = getCardIDString();
  Serial.println(cardID);
}

// H√†m l·∫•y m√£ th·∫ª d·∫°ng chu·ªói
String getCardIDString() {
  String cardID = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) {
      cardID += "0";
    }
    cardID += String(mfrc522.uid.uidByte[i], HEX);
  }
  cardID.toUpperCase();
  return cardID;
}

// H√†m ki·ªÉm tra RFID c√≥ ho·∫°t ƒë·ªông kh√¥ng
bool isRFIDWorking() {
  // Th·ª≠ ƒë·ªçc version register
  byte version = mfrc522.PCD_ReadRegister(mfrc522.VersionReg);
  return (version != 0x00 && version != 0xFF);
}

// H√†m x·ª≠ l√Ω l·ªói RFID v·ªõi detailed logging
void handleRFIDError() {
  Serial.println(F("üîß Performing RFID reset and reinitialize..."));
  
  // Reset MFRC522
  digitalWrite(RFID_RST_PIN, LOW);
  Serial.println(F("   - RST pin LOW"));
  delay(100);
  digitalWrite(RFID_RST_PIN, HIGH);
  Serial.println(F("   - RST pin HIGH"));
  delay(100);
  
  // Reinitialize
  mfrc522.PCD_Init();
  Serial.println(F("   - PCD_Init() completed"));
  delay(200);
}

// H√†m t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i RFID (retry v√¥ h·∫°n)
bool reconnectRFID() {
  Serial.println(F("==RFID CONNECTION LOST! Starting unlimited reconnection..."));
  Serial.println(F("Press any key to cancel or wait for reconnection..."));
  
  int retryCount = 0;
  
  while (true) { // Retry v√¥ h·∫°n
    retryCount++;
    Serial.printf("üîÑ Reconnection attempt #%d...\n", retryCount);
    
    // Reset v√† kh·ªüi t·∫°o l·∫°i
    handleRFIDError();
    
    // Test k·∫øt n·ªëi
    if (testRFIDConnection()) {
      Serial.println(F("==RFID RECONNECTED SUCCESSFULLY!=="));
      return true;
    }
    
    // Hi·ªÉn th·ªã status v√† ƒë·ª£i
    Serial.printf("==Attempt #%d failed. Retrying in 2 seconds...\n", retryCount);
    
    // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi retry (c√≥ th·ªÉ check Serial input ƒë·ªÉ cancel)
    for (int i = 0; i < 20; i++) { // 20 x 100ms = 2s
      delay(100);
      
      // C√≥ th·ªÉ th√™m logic ƒë·ªÉ break n·∫øu user input (optional)
      // if (Serial.available()) break;
    }
    
    // Hi·ªÉn th·ªã progress m·ªói 10 l·∫ßn th·ª≠
    if (retryCount % 10 == 0) {
      Serial.printf(" Still trying... (%d attempts completed)\n", retryCount);
      Serial.println(F("Tip: Check physical connections and power supply"));
    }
  }
  
  // Never reached due to infinite loop
  return false;
}

void rfidTask(void *parameter) {
  Serial.println("RFID Task started");
  
  // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o xong
  vTaskDelay(2000 / portTICK_PERIOD_MS);
  
  // Kh·ªüi t·∫°o RFID
  setupRFID();
  
  bool rfidConnected = isRFIDWorking(); // Check initial status
  Serial.printf("Initial RFID status: %s\n", rfidConnected ? "CONNECTED" : "DISCONNECTED");
  
  while (true) {
    // üö® REAL-TIME CONNECTION CHECK - ki·ªÉm tra m·ªói loop
    bool currentStatus = isRFIDWorking();
    
    if (currentStatus != rfidConnected) {
      // Status changed - report immediately
      if (currentStatus) {
        Serial.println(F("RFID CONNECTION RESTORED!"));
      } else {
        Serial.println(F("RFID CONNECTION LOST DETECTED!"));
      }
      rfidConnected = currentStatus;
    }
    
    // N·∫øu RFID b·ªã disconnect, b·∫Øt ƒë·∫ßu reconnection ngay l·∫≠p t·ª©c
    if (!rfidConnected) {
      Serial.println(F("Starting immediate reconnection process..."));
      if (reconnectRFID()) {
        rfidConnected = true;
        // Ti·∫øp t·ª•c v·ªõi card scanning
      } else {
        // Never reached due to infinite retry
        continue;
      }
    }
    
    // Ki·ªÉm tra xem c√≥ th·∫ª m·ªõi kh√¥ng
    if (!mfrc522.PICC_IsNewCardPresent()) {
      vTaskDelay(50 / portTICK_PERIOD_MS); // Gi·∫£m delay ƒë·ªÉ responsive h∆°n
      continue;
    }

    // Ch·ªçn m·ªôt trong c√°c th·∫ª
    if (!mfrc522.PICC_ReadCardSerial()) {
      // ‚ö†Ô∏è IMMEDIATE ERROR DETECTION
      Serial.println(F("Card read failed! Checking connection..."));
      if (!isRFIDWorking()) {
        Serial.println(F("RFID connection lost during card read!"));
        rfidConnected = false;
        continue; // S·∫Ω trigger reconnection ·ªü loop ti·∫øp theo
      }
      vTaskDelay(100 / portTICK_PERIOD_MS);
      continue;
    }

    // üéâ SUCCESSFUL CARD READ
    Serial.println(F("‚úÖ Card read successful!"));
    
    // Hi·ªÉn th·ªã UID c·ªßa th·∫ª
    Serial.print(F("üîç M√£ th·∫ª: "));
    printCardID();
    Serial.println();
    
    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa th·∫ª
    printCardDetails();
    
    // L·∫•y m√£ th·∫ª d∆∞·ªõi d·∫°ng chu·ªói
    String cardID = getCardIDString();
    
    // G·ª≠i qua MQTT (gi·ªØ nguy√™n ch·ª©c nƒÉng c≈©)
    sendRfidData(cardID);
    
    // üÜï X·ª¨ L√ù ƒêI·ªÇM DANH V·ªöI GOOGLE SHEETS
    Serial.println(F("Processing attendance..."));
    processRFIDForAttendance(cardID);
    
    Serial.println(F("========================================"));
    
    // D·ª´ng PICC
    mfrc522.PICC_HaltA();
    
    // D·ª´ng m√£ h√≥a tr√™n PCD
    mfrc522.PCD_StopCrypto1();
    
    // ƒê·ª£i 3 gi√¢y tr∆∞·ªõc khi ƒë·ªçc th·∫ª ti·∫øp theo
    vTaskDelay(3000 / portTICK_PERIOD_MS);
  }
} 