#include "google_sheets_task.h"
#include "wifi_task.h"
#include "main_constants.h"
#include <WiFiClientSecure.h>
#include <time.h>
#include <esp_task_wdt.h>

// Google Apps Script Configuration
const char* GOOGLE_SCRIPT_ID = "AKfycbzOipxPsgXpl_9QxJUuXGrtBVk2LmJcAg_lcUOaTrPIMKUeewvbRLDLZ6N6yn6Wy-4"; // B·∫°n s·∫Ω thay th·∫ø sau
const char* GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbzOipxPsgXpl_9QxJUuXGrtBVk2LmJcAg_lcUOaTrPIMKUeewvbRLDLZ6N6yn6Wy-4/exec";

// WiFi client for HTTPS
WiFiClientSecure client;

// In-memory database cho demo (trong th·ª±c t·∫ø c√≥ th·ªÉ l∆∞u v√†o SPIFFS ho·∫∑c EEPROM)
struct UserData {
  String cardId;
  String name;
};

// Database m·∫´u - s·∫Ω ƒë∆∞·ª£c sync t·ª´ Google Sheets
UserData userDatabase[50]; // TƒÉng k√≠ch th∆∞·ªõc ƒë·ªÉ ch·ª©a nhi·ªÅu user h∆°n
int userDatabaseCount = 0;
unsigned long lastSyncTime = 0;
const unsigned long SYNC_INTERVAL = 300000; // Sync m·ªói 5 ph√∫t

// L∆∞u tr·∫°ng th√°i ƒëi·ªÉm danh cu·ªëi c√πng
String lastAttendanceStatus[10]; // Gi·∫£ s·ª≠ t·ªëi ƒëa 10 th·∫ª
String lastAttendanceCardId[10];
int attendanceCount = 0;

void setupGoogleSheets() {
  Serial.println("Setting up Google Sheets...");
  
  // C·∫•u h√¨nh NTP ƒë·ªÉ l·∫•y th·ªùi gian ch√≠nh x√°c
  configTime(7 * 3600, 0, "pool.ntp.org"); // GMT+7 cho Vi·ªát Nam
  
  // C·∫•u h√¨nh SSL client (b·ªè qua ki·ªÉm tra certificate cho demo)
  client.setInsecure();
  
  // ƒê·ª¢I WIFI V√Ä TH·ª∞C HI·ªÜN SYNC V·ªöI RETRY
  int wifiWaitCount = 0;
  while (!wifiConnected && wifiWaitCount < 30) { // ƒê·ª£i t·ªëi ƒëa 30 gi√¢y
    delay(1000);
    wifiWaitCount++;
  }
  
  if (!wifiConnected) {
    Serial.println("WiFi not connected, skipping sync");
    return;
  }
  
  // Retry initial sync 3 l·∫ßn
  for (int i = 1; i <= 3; i++) {
    
    if (syncDatabaseFromGoogleSheets()) {
      return;
    } else {
      if (i < 3) {
        delay(5000);
      }
    }
  }
  
  Serial.println("Initial sync failed");
}

String getCurrentDateTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return "Unknown";
  }
  
  char dateStr[20];
  char timeStr[20];
  
  strftime(dateStr, sizeof(dateStr), "%d/%m/%Y", &timeinfo);
  strftime(timeStr, sizeof(timeStr), "%H:%M:%S", &timeinfo);
  
  return String(dateStr) + "," + String(timeStr);
}

String getUserNameFromCard(const String &cardId) {
  // Auto-sync n·∫øu c·∫ßn
  if (millis() - lastSyncTime > SYNC_INTERVAL) {
    Serial.println("üîÑ Auto-sync (5min)...");
    syncDatabaseFromGoogleSheets();
  }
  
  for (int i = 0; i < userDatabaseCount; i++) {
    if (userDatabase[i].cardId == cardId) {
      return userDatabase[i].name;
    }
  }
  return "Unknown User";
}

bool isCardRegistered(const String &cardId) {
  // Auto-sync n·∫øu c·∫ßn
  if (millis() - lastSyncTime > SYNC_INTERVAL) {
    syncDatabaseFromGoogleSheets();
  }
  
  if (userDatabaseCount == 0) {
    Serial.println("Database empty, syncing...");
    if (syncDatabaseFromGoogleSheets()) {
      Serial.println("‚úÖ Emergency sync OK");
    } else {
      Serial.println("Emergency sync failed");
      return false;
    }
  }
  
  for (int i = 0; i < userDatabaseCount; i++) {
    if (userDatabase[i].cardId == cardId) {
      return true;
    }
  }
  
  return false;
}

String determineAttendanceStatus(const String &cardId) {
  // T√¨m tr·∫°ng th√°i cu·ªëi c√πng c·ªßa th·∫ª n√†y
  for (int i = 0; i < attendanceCount; i++) {
    if (lastAttendanceCardId[i] == cardId) {
      // N·∫øu l·∫ßn cu·ªëi l√† "IN" th√¨ l·∫ßn n√†y l√† "OUT", v√† ng∆∞·ª£c l·∫°i
      return (lastAttendanceStatus[i] == "IN") ? "OUT" : "IN";
    }
  }
  
  // N·∫øu ch∆∞a c√≥ record n√†o, m·∫∑c ƒë·ªãnh l√† "IN"
  return "IN";
}

void updateLastAttendanceStatus(const String &cardId, const String &status) {
  // T√¨m v√† c·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi
  for (int i = 0; i < attendanceCount; i++) {
    if (lastAttendanceCardId[i] == cardId) {
      lastAttendanceStatus[i] = status;
      return;
    }
  }
  
  // Th√™m m·ªõi n·∫øu ch∆∞a c√≥
  if (attendanceCount < 10) {
    lastAttendanceCardId[attendanceCount] = cardId;
    lastAttendanceStatus[attendanceCount] = status;
    attendanceCount++;
  }
}

bool sendAttendanceToGoogleSheets(const AttendanceData &data) {
  if (!wifiConnected) {
    Serial.println("WiFi not connected");
    return false;
  }
  
  // T·∫°o JSON payload manually ƒë·ªÉ tr√°nh l·ªói ArduinoJson
  String jsonString = "{";
  jsonString += "\"action\":\"addAttendance\",";
  jsonString += "\"cardId\":\"" + data.cardId + "\",";
  jsonString += "\"name\":\"" + data.name + "\",";
  jsonString += "\"status\":\"" + data.status + "\",";
  jsonString += "\"date\":\"" + data.date + "\",";
  jsonString += "\"time\":\"" + data.time + "\"";
  jsonString += "}";
  
  // T·∫°o HTTP client v·ªõi timeout ng·∫Øn h∆°n
  HttpClient httpClient(client, "script.google.com", 443);
  httpClient.setHttpResponseTimeout(8000); // Gi·∫£m timeout xu·ªëng 8s
  
  // T·∫°o URL path
  String path = "/macros/s/" + String(GOOGLE_SCRIPT_ID) + "/exec";
  
  bool success = false;
  
  // G·ª≠i POST request v·ªõi error handling
  if (httpClient.post(path, "application/json", jsonString) == 0) {
    
    // ƒê·ªçc response v·ªõi timeout ng·∫Øn h∆°n
    unsigned long startTime = millis();
    while (!httpClient.available() && (millis() - startTime < 8000)) {
      delay(10);
    }
    
    if (httpClient.available()) {
      int statusCode = httpClient.responseStatusCode();
      
      // Ch·ªâ ƒë·ªçc status, b·ªè qua response body ƒë·ªÉ tr√°nh SSL error
      success = (statusCode == 200 || statusCode == 302);
      
      // Skip response body ƒë·ªÉ tr√°nh SSL read errors
      httpClient.skipResponseHeaders();
    }
  }
  
  // Proper cleanup
  httpClient.stop();
  delay(200); // TƒÉng delay cleanup ƒë·ªÉ SSL connection ƒë√≥ng ƒë√∫ng c√°ch
  
  return success;
}

void processRFIDForAttendance(const String &cardId) {
  Serial.printf("Card: %s\n", cardId.c_str());
  
  // Ki·ªÉm tra th·∫ª c√≥ ƒëƒÉng k√Ω kh√¥ng
  if (!isCardRegistered(cardId)) {
    Serial.println("Card not registered");
    return;
  }
  
  // L·∫•y th√¥ng tin user
  String userName = getUserNameFromCard(cardId);
  String status = determineAttendanceStatus(cardId);
  String dateTime = getCurrentDateTime();
  
  // T√°ch date v√† time
  int commaIndex = dateTime.indexOf(',');
  String date = dateTime.substring(0, commaIndex);
  String time = dateTime.substring(commaIndex + 1);
  
  // T·∫°o attendance data
  AttendanceData attendance;
  attendance.cardId = cardId;
  attendance.name = userName;
  attendance.status = status;
  attendance.date = date;
  attendance.time = time;
  
  Serial.printf("Attendance: %s - %s\n", userName.c_str(), status.c_str());
  
  // G·ª≠i l√™n Google Sheets
  if (sendAttendanceToGoogleSheets(attendance)) {
    Serial.println("‚úÖ Sent to Google Sheets");
    updateLastAttendanceStatus(cardId, status);
  } else {
    Serial.println("Failed to send");
  }
}

void googleSheetsTask(void *parameter) {
  // ƒê·ª£i WiFi k·∫øt n·ªëi
  while (!wifiConnected) {
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
  
  setupGoogleSheets();
  
  // Task n√†y ch·ªß y·∫øu ch·ªù ƒë∆∞·ª£c g·ªçi t·ª´ RFID task
  // Ho·∫∑c c√≥ th·ªÉ sync d·ªØ li·ªáu ƒë·ªãnh k·ª≥
  while (true) {
    // C√≥ th·ªÉ th√™m logic sync ƒë·ªãnh k·ª≥ ·ªü ƒë√¢y
    vTaskDelay(10000 / portTICK_PERIOD_MS); // Ch·ªù 10 gi√¢y
  }
}

// Database sync functions
bool syncDatabaseFromGoogleSheets() {
  if (!wifiConnected) {
    Serial.println("WiFi not connected");
    return false;
  }
  
  Serial.println("Syncing database...");
  
  // TH·ª¨ PH∆Ø∆†NG PH√ÅP 1: GET REQUEST
  if (tryGetMethod()) {
    return true;
  }
  
  Serial.println("GET failed, trying POST...");
  
  // TH·ª¨ PH∆Ø∆†NG PH√ÅP 2: POST WITH FORM DATA
  return tryPostMethod();
}

bool tryGetMethod() {
  WiFiClientSecure httpClient;
  httpClient.setInsecure();
  httpClient.setTimeout(10000);
  
  String getPath = "/macros/s/" + String(GOOGLE_SCRIPT_ID) + "/exec?action=getDatabase";
  
  if (httpClient.connect("script.google.com", 443)) {
    
    httpClient.println("GET " + getPath + " HTTP/1.1");
    httpClient.println("Host: script.google.com");
    httpClient.println("User-Agent: ESP32-RFID/1.0");
    httpClient.println("Accept: application/json");
    httpClient.println("Connection: close");
    httpClient.println();
    
    unsigned long startTime = millis();
    while (!httpClient.available() && (millis() - startTime < 10000)) {
      delay(50);
      esp_task_wdt_reset();
    }
    
    if (httpClient.available()) {
      String statusLine = httpClient.readStringUntil('\n');
      
      // Skip headers
      bool headersDone = false;
      while (httpClient.available() && !headersDone) {
        String line = httpClient.readStringUntil('\n');
        if (line == "\r") {
          headersDone = true;
        }
        esp_task_wdt_reset();
      }
      
      String response = "";
      while (httpClient.available()) {
        response += httpClient.readString();
        esp_task_wdt_reset();
      }
      
      httpClient.stop();
      
      if (response.length() > 0) {
        bool success = parseDatabaseResponse(response);
        if (success) {
          lastSyncTime = millis();
          Serial.printf("‚úÖ Database synced: %d users\n", userDatabaseCount);
          return true;
        }
      }
    }
    
    httpClient.stop();
  }
  
  return false;
}

bool tryPostMethod() {
  WiFiClientSecure httpClient;
  httpClient.setInsecure();
  httpClient.setTimeout(10000);
  
  String postPath = "/macros/s/" + String(GOOGLE_SCRIPT_ID) + "/exec";
  String formData = "action=getDatabase";
  
  if (httpClient.connect("script.google.com", 443)) {
    
    httpClient.println("POST " + postPath + " HTTP/1.1");
    httpClient.println("Host: script.google.com");
    httpClient.println("User-Agent: ESP32-RFID/1.0");
    httpClient.println("Content-Type: application/x-www-form-urlencoded");
    httpClient.println("Content-Length: " + String(formData.length()));
    httpClient.println("Connection: close");
    httpClient.println();
    httpClient.println(formData);
    
    unsigned long startTime = millis();
    while (!httpClient.available() && (millis() - startTime < 10000)) {
      delay(50);
      esp_task_wdt_reset();
    }
    
    if (httpClient.available()) {
      String statusLine = httpClient.readStringUntil('\n');
      
      // Skip headers
      bool headersDone = false;
      while (httpClient.available() && !headersDone) {
        String line = httpClient.readStringUntil('\n');
        if (line == "\r") {
          headersDone = true;
        }
        esp_task_wdt_reset();
      }
      
      String response = "";
      while (httpClient.available()) {
        response += httpClient.readString();
        esp_task_wdt_reset();
      }
      
      httpClient.stop();
      
      if (response.length() > 0) {
        bool success = parseDatabaseResponse(response);
        if (success) {
          lastSyncTime = millis();
          Serial.printf("‚úÖ Database synced: %d users\n", userDatabaseCount);
          return true;
        }
      }
    }
    
    httpClient.stop();
  }
  
  return false;
}

bool parseDatabaseResponse(const String &response) {
  // Ki·ªÉm tra n·∫øu response l√† HTML redirect
  if (response.indexOf("<HTML>") >= 0 && response.indexOf("Moved Temporarily") >= 0) {
    
    // T√¨m redirect URL
    int hrefStart = response.indexOf("HREF=\"");
    if (hrefStart >= 0) {
      hrefStart += 6; // Skip "HREF=\""
      int hrefEnd = response.indexOf("\"", hrefStart);
      if (hrefEnd >= 0) {
        String redirectUrl = response.substring(hrefStart, hrefEnd);
        redirectUrl.replace("&amp;", "&");
        
        return followRedirectForJSON(redirectUrl);
      }
    }
    
    return false;
  }
  
  // N·∫øu kh√¥ng ph·∫£i redirect, parse JSON tr·ª±c ti·∫øp
  return parseJSONResponse(response);
}

bool followRedirectForJSON(const String &redirectUrl) {
  // Extract domain v√† path t·ª´ redirect URL
  int protocolEnd = redirectUrl.indexOf("://");
  if (protocolEnd < 0) return false;
  
  int domainStart = protocolEnd + 3;
  int pathStart = redirectUrl.indexOf("/", domainStart);
  if (pathStart < 0) return false;
  
  String domain = redirectUrl.substring(domainStart, pathStart);
  String path = redirectUrl.substring(pathStart);
  
  // T·∫°o HTTP client cho redirect v·ªõi timeout ng·∫Øn h∆°n
  WiFiClientSecure redirectClient;
  redirectClient.setInsecure();
  redirectClient.setTimeout(8000); // 8 gi√¢y
  
  if (redirectClient.connect(domain.c_str(), 443)) {
    
    redirectClient.println("GET " + path + " HTTP/1.1");
    redirectClient.println("Host: " + domain);
    redirectClient.println("Connection: close");
    redirectClient.println();
    
    // ƒê·ª£i response v·ªõi timeout ng·∫Øn
    unsigned long startTime = millis();
    while (!redirectClient.available() && (millis() - startTime < 8000)) {
      delay(50);
      esp_task_wdt_reset(); // Feed watchdog
    }
    
    if (redirectClient.available()) {
      // Skip headers
      bool headersDone = false;
      while (redirectClient.available() && !headersDone) {
        String line = redirectClient.readStringUntil('\n');
        if (line == "\r") {
          headersDone = true;
        }
        esp_task_wdt_reset();
      }
      
      // ƒê·ªçc body
      String redirectResponse = "";
      while (redirectClient.available()) {
        redirectResponse += redirectClient.readString();
        esp_task_wdt_reset();
      }
      
      redirectClient.stop();
      
      if (redirectResponse.length() > 0) {
        return parseJSONResponse(redirectResponse);
      }
    }
    
    redirectClient.stop();
  }
  
  return false;
}

bool parseJSONResponse(const String &response) {
  // T√¨m JSON data trong response
  int jsonStart = response.indexOf('{');
  int jsonEnd = response.lastIndexOf('}');
  
  if (jsonStart == -1 || jsonEnd == -1) {
    return false;
  }
  
  String jsonString = response.substring(jsonStart, jsonEnd + 1);
  
  // Debug JSON ƒë·ªÉ th·∫•y thay ƒë·ªïi t·ª´ database
  Serial.println("Database JSON:");
  Serial.println(jsonString);
  
  // Parse JSON manually (simple approach)
  if (jsonString.indexOf("\"status\":\"success\"") == -1) {
    return false;
  }
  
  // Reset database
  userDatabaseCount = 0;
  
  // T√¨m users array
  int usersStart = jsonString.indexOf("\"users\":[");
  if (usersStart == -1) {
    
    // Check if it's explicitly empty
    if (jsonString.indexOf("\"users\":[]") >= 0) {
      return true;
    }
    
    // Check for count field
    if (jsonString.indexOf("\"count\":0") >= 0) {
      return true;
    }
    
    return false;
  }
  
  // Simple parsing cho t·ª´ng user
  int pos = usersStart;
  while (pos < jsonString.length() && userDatabaseCount < 49) {
    
    // T√¨m cardId
    int cardIdStart = jsonString.indexOf("\"cardId\":\"", pos);
    if (cardIdStart == -1) break;
    cardIdStart += 10; // Length of "cardId":"
    int cardIdEnd = jsonString.indexOf("\"", cardIdStart);
    if (cardIdEnd == -1) break;
    
    // T√¨m name
    int nameStart = jsonString.indexOf("\"name\":\"", cardIdEnd);
    if (nameStart == -1) break;
    nameStart += 8; // Length of "name":"
    int nameEnd = jsonString.indexOf("\"", nameStart);
    if (nameEnd == -1) break;
    
    // L∆∞u v√†o database
    userDatabase[userDatabaseCount].cardId = jsonString.substring(cardIdStart, cardIdEnd);
    userDatabase[userDatabaseCount].name = jsonString.substring(nameStart, nameEnd);
    
    userDatabaseCount++;
    pos = nameEnd;
  }
  
  return true;
}

void printCurrentDatabase() {
  Serial.println("üìã Current User Database:");
  Serial.println("STT | Card ID  | Name");
  Serial.println("----|----------|------------------");
  
  for (int i = 0; i < userDatabaseCount; i++) {
    Serial.printf("%2d  | %-8s | %s\n", 
                  i+1, 
                  userDatabase[i].cardId.c_str(), 
                  userDatabase[i].name.c_str());
  }
  
  if (userDatabaseCount == 0) {
    Serial.println("    | (empty)  | No users found");
  }
  Serial.println("---------------------------");
}

unsigned long getLastSyncTime() {
  return lastSyncTime;
}

bool loadUserDatabaseFromSheets() {
  // Force sync from Google Sheets
  return syncDatabaseFromGoogleSheets();
} 